import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.JFrame;

public class Main 
{
    public static void main(String[] args) 
    {
        SetWindow window = new SetWindow("Flappy Bird");
        window.loadBackground("bin/img/backGround.png"); // 背景画像のパス
        window.loadForeground("bin/img/map.png"); // フロント画像のパス
        window.loadPlayer("bin/img/Bird.png"); // プレイヤー画像のパス
        window.startGameLoop(); // ゲームループを開始
    }

    static class SetWindow extends JFrame 
    {
        private BufferedImage backgroundImage;
        private BufferedImage foregroundImage;
        private BufferedImage playerImage; // プレイヤー画像
        private final int TARGET_FPS = 30; // ターゲットフレームレート
        private final long FRAME_TIME = 1000 / TARGET_FPS; // フレームごとの時間（ミリ秒）

        SetWindow(String name) 
        {
            super(name);
            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            setUndecorated(true); // ウィンドウの装飾を取り除く
            setExtendedState(JFrame.MAXIMIZED_BOTH); // フルスクリーンにする
            setVisible(true);
            setLocationRelativeTo(null); // ウィンドウを画面の中央に配置
        }

        void loadBackground(String imagePath) {
            try {
                backgroundImage = ImageIO.read(new java.io.File(imagePath));
                repaint(); // 再描画
            } catch (IOException e) {
                System.err.println("背景画像の読み込みエラー: " + imagePath);
                e.printStackTrace();
            }
        }

        void loadForeground(String imagePath) 
        {
            try 
            {
                foregroundImage = ImageIO.read(new java.io.File(imagePath));
                repaint(); // 再描画
            } 
            catch (IOException e) 
            {
                System.err.println("フロント画像の読み込みエラー: " + imagePath);
                e.printStackTrace();
            }
        }

        void loadPlayer(String imagePath)
        {
            try
            {
                playerImage = ImageIO.read(new java.io.File(imagePath));
                repaint(); // 再描画
            } catch (IOException e) 
            {
                System.err.println("プレイヤー画像の読み込みエラー: " + imagePath);
                e.printStackTrace();
            }
        }

        void startGameLoop() {
            new Thread(() -> {
                while (true) {
                    long startTime = System.currentTimeMillis();

                    repaint(); // 再描画

                    // フレーム時間を計算し、必要に応じてスリープ
                    long elapsedTime = System.currentTimeMillis() - startTime;
                    long sleepTime = FRAME_TIME - elapsedTime;
                    if (sleepTime > 0) {
                        try {
                            Thread.sleep(sleepTime);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }).start();
        }

        @Override
        public void paint(Graphics g) 
        {
            super.paint(g);
            if (backgroundImage != null) 
            {
                // 背景画像をウィンドウサイズにリサイズ
                Image resizedBackground = backgroundImage.getScaledInstance(getWidth(), getHeight(), Image.SCALE_SMOOTH);
                g.drawImage(resizedBackground, 0, 0, this); // 背景画像を描画
            }
            if (foregroundImage != null) 
            {
                // フロント画像を下に描画
                int y = getHeight() - foregroundImage.getHeight();
                g.drawImage(foregroundImage, 0, y, this); // フロント画像を描画

                // ウィンドウのサイズをフロント画像の高さに合わせる
                setSize(getWidth(), foregroundImage.getHeight());
                setLocationRelativeTo(null); // 位置を再設定して中央に配置
            }
            if (playerImage != null) 
            {
                // プレイヤー画像を四分割して描画
                int playerWidth = 16;  // プレイヤーの幅
                int playerHeight = 16; // プレイヤーの高さ

                // 各部分の位置を計算して描画
                for (int i = 0; i < 2; i++) // 行数を2に
                { 
                    for (int j = 0; j < 2; j++) // 列数を2に
                    { 
                        int srcX = j * playerWidth; // 元画像内のX座標
                        int srcY = i * playerHeight; // 元画像内のY座標
                        int destX = 0; // 描画位置Xを左端に
                        int destY = (getHeight() - (playerHeight * 2)) / 2 + i * playerHeight; // 描画位置Yを中央に

                        // 各部分を描画
                        g.drawImage(playerImage, destX, destY, 
                                    destX + playerWidth, destY + playerHeight, 
                                    srcX, srcY, 
                                    srcX + playerWidth, srcY + playerHeight, 
                                    this);
                    }
                }
            }
        }
    }
}
